{"version":3,"sources":["Knob.jsx","serviceWorker.js","index.js"],"names":["Knob","dragFlag","handleMouseDown","e","_this","setState","y","screenY","handleMouseUp","handleMouseLeave","state","value","x","this","knobStyle","height","props","size","width","backgroundColor","textAlign","dialStyle","transform","witnessCoords","x1","Math","sin","PI","y1","cos","x2","y2","react_default","a","createElement","className","onMouseMove","bind","style","onMouseDown","onMouseUp","onMouseLeave","fontSize","userSelect","labelText","viewBox","cx","cy","r","fill","stroke","strokeWidth","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_Knob_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6912351b.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./Knob.css\";\n\nclass Knob extends Component {\n  dragFlag = false;\n  handleMouseDown = e => {\n    this.dragFlag = true;\n    this.setState({ y: e.screenY });\n  };\n  handleMouseUp = e => {\n    this.dragFlag = false;\n  };\n  handleMouseLeave = e => {\n    this.dragFlag = false;\n  };\n  onMouseMove(e) {\n    if (this.dragFlag && this.state.y > e.screenY) {\n      this.setState({\n        y: e.screenY,\n        value:\n          this.state.value > -140 ? this.state.value - 10 : this.state.value\n      });\n    }\n    if (this.dragFlag && this.state.y < e.screenY) {\n      this.setState({\n        y: e.screenY,\n        value: this.state.value < 140 ? this.state.value + 10 : this.state.value\n      });\n    }\n  }\n  state = {\n    value: 135,\n    x: 0,\n    y: 0\n  };\n\n  render() {\n    var knobStyle = {\n      height: this.props.size * 1.2,\n      width: this.props.size,\n      backgroundColor: \"grey\",\n      textAlign: \"center\"\n    };\n    var dialStyle = {\n      height: this.props.size * 0.8,\n      width: this.props.size * 0.8,\n      transform: \"rotate(.5turn)\"\n    };\n    var labelStyle = {\n      fontSize: \"10px\",\n      userSelect: \"none\"\n    };\n    var witnessCoords = {\n      x1: 0.6 * Math.sin((this.state.value / 180) * Math.PI),\n      y1: 0.6 * Math.cos((this.state.value / 180) * Math.PI),\n      x2: Math.sin((this.state.value / 180) * Math.PI),\n      y2: Math.cos((this.state.value / 180) * Math.PI)\n    };\n    return (\n      <div\n        className=\"knob\"\n        onMouseMove={this.onMouseMove.bind(this)}\n        style={knobStyle}\n        onMouseDown={this.handleMouseDown}\n        onMouseUp={this.handleMouseUp}\n        onMouseLeave={this.handleMouseLeave}\n      >\n        <p style={labelStyle}>\n          {this.props.labelText ? this.props.labelText : `labelText`}\n        </p>\n        <svg style={dialStyle} viewBox=\"-1 -1 2 2\">\n          <circle cx=\"0\" cy=\"0\" r=\"1\" fill=\"black\" />\n          <line\n            className=\"witnessMark\"\n            stroke=\"white\"\n            strokeWidth=\"5%\"\n            x1={witnessCoords.x1}\n            y1={witnessCoords.y1}\n            x2={witnessCoords.x2}\n            y2={witnessCoords.y2}\n          />\n          <circle cx=\"0\" cy=\"0\" r=\".6\" fill=\"silver\" />\n          <circle\n            cx={1.2 * Math.sin(((30 + this.state.value) / 180) * Math.PI)}\n            cy={1.2 * Math.cos(((30 + this.state.value) / 180) * Math.PI)}\n            r=\".35\"\n            fill=\"grey\"\n          />\n          <circle\n            cx={1.2 * Math.sin(((90 + this.state.value) / 180) * Math.PI)}\n            cy={1.2 * Math.cos(((90 + this.state.value) / 180) * Math.PI)}\n            r=\".35\"\n            fill=\"grey\"\n          />\n          <circle\n            cx={1.2 * Math.sin(((150 + this.state.value) / 180) * Math.PI)}\n            cy={1.2 * Math.cos(((150 + this.state.value) / 180) * Math.PI)}\n            r=\".35\"\n            fill=\"grey\"\n          />\n          <circle\n            cx={1.2 * Math.sin(((210 + this.state.value) / 180) * Math.PI)}\n            cy={1.2 * Math.cos(((210 + this.state.value) / 180) * Math.PI)}\n            r=\".35\"\n            fill=\"grey\"\n          />\n          <circle\n            cx={1.2 * Math.sin(((270 + this.state.value) / 180) * Math.PI)}\n            cy={1.2 * Math.cos(((270 + this.state.value) / 180) * Math.PI)}\n            r=\".35\"\n            fill=\"grey\"\n          />\n          <circle\n            cx={1.2 * Math.sin(((330 + this.state.value) / 180) * Math.PI)}\n            cy={1.2 * Math.cos(((330 + this.state.value) / 180) * Math.PI)}\n            r=\".35\"\n            fill=\"grey\"\n          />\n        </svg>\n      </div>\n    );\n  }\n}\n\nexport default Knob;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport \"./Knob.css\";\nimport Knob from \"./Knob\";\nimport * as serviceWorker from \"./serviceWorker\";\nReactDOM.render(\n  <div>\n    <Knob size=\"100px\" labelText=\"Volume\" />\n    <Knob size=\"150px\" labelText=\"Freq\" />\n    <Knob size=\"80px\" labelText=\"Tone\" />\n  </div>,\n\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}